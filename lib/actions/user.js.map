{"version":3,"sources":["../../src/actions/user.js"],"names":["receiveLogin","initiateLogin","logout","saveProfile","updateLoginField","validateProfile","UserService","LOGOUT","REQUEST_LOGIN","RECEIVE_LOGIN","SAVE_PROFILE","UPDATE_LOGIN_FIELD","requestLogin","type","response","profile","data","error","email","password","dispatch","login","then","catch","logout_profile","storage","save","key","USER_PROFILE","rawData","value","getState","load","autoSync","status"],"mappings":";;;;;;QAqBgBA,Y,GAAAA,Y;QAWAC,a,GAAAA,a;QAiBAC,M,GAAAA,M;QAaAC,W,GAAAA,W;QAUAC,gB,GAAAA,gB;QAWAC,e,GAAAA,e;;AAnFhB;;IAAYC,W;;AACZ;;;;AAEO,IAAMC,0BAAS,QAAf;AACA,IAAMC,wCAAgB,eAAtB;AACA,IAAMC,wCAAgB,eAAtB;AACA,IAAMC,sCAAe,cAArB;AACA,IAAMC,kDAAqB,oBAA3B;;AAEP;;;AAGA,SAASC,YAAT,GAAwB;AACtB,SAAO;AACLC,UAAML;AADD,GAAP;AAGD;;AAED;;;AAGO,SAASR,YAAT,CAAsBc,QAAtB,EAAgC;AACrC,SAAO;AACLD,UAAMJ,aADD;AAELM,aAASD,SAASE,IAFb;AAGLC,WAAOH,SAASG;AAHX,GAAP;AAKD;;AAED;;;AAGO,SAAShB,aAAT,CAAuBiB,KAAvB,EAA8BC,QAA9B,EAAwC;AAC7C,SAAO,oBAAY;AACjBC,aAASR,cAAT;;AAEA,WAAON,YAAYe,KAAZ,CAAkBH,KAAlB,EAAyBC,QAAzB,EACJG,IADI,CACC,mBAAW;AACfF,eAASpB,aAAa,EAACgB,MAAMD,OAAP,EAAb,CAAT;AACAK,eAASjB,YAAYY,OAAZ,CAAT;AACA;AACD,KALI,EAMJQ,KANI,CAME;AAAA,aAASH,SAASpB,aAAa,EAACiB,OAAOA,KAAR,EAAb,CAAT,CAAT;AAAA,KANF,CAAP;AAOD,GAVD;AAWD;;AAED;;;AAGO,SAASf,MAAT,GAAkB;AACvB,SAAO,oBAAY;AACjB,QAAIsB,iBAAiB,EAArB;;AAEAJ,aAAS,EAACP,MAAMN,MAAP,EAAT;AACAa,aAASjB,YAAYqB,cAAZ,CAAT;AACA;AACD,GAND;AAOD;;AAED;;;AAGO,SAASrB,WAAT,CAAqBY,OAArB,EAA8B;AACnC,SAAO,oBAAY;AACjBU,YAAQC,IAAR,CAAa,EAACC,KAAK,mBAAKC,YAAX,EAAyBC,SAASd,OAAlC,EAAb;AACAK,aAAS,EAACP,MAAMH,YAAP,EAAT;AACD,GAHD;AAID;;AAED;;;AAGO,SAASN,gBAAT,CAA0BuB,GAA1B,EAA+BG,KAA/B,EAAsC;AAC3C,SAAO;AACLjB,UAAMF,kBADD;AAELgB,SAAKA,GAFA;AAGLG,WAAOA;AAHF,GAAP;AAKD;;AAED;;;AAGO,SAASzB,eAAT,GAA2B;AAChC,SAAO,UAACe,QAAD,EAAWW,QAAX,EAAwB;AAC7B,WAAON,QAAQO,IAAR,CAAa,EAACL,KAAK,mBAAKC,YAAX,EAAyBK,UAAU,KAAnC,EAAb,EACJX,IADI,CACC,mBAAW;AACf,UAAIP,WAAWA,QAAQmB,MAAR,KAAmB,eAAlC,EAAmD;AACjDd,iBAASpB,aAAa,EAACe,SAASA,OAAV,EAAb,CAAT;AACA;AACD;AACF,KANI,EAOJQ,KAPI,CAOE,iBAAS;AACd;AACAH,eAASjB,YAAY,EAAZ,CAAT;AACD,KAVI,CAAP;AAWD,GAZD;AAaD","file":"user.js","sourcesContent":["import * as UserService from '../services/user';\nimport {KEYS} from '../constants/localStorage';\n\nexport const LOGOUT = 'LOGOUT';\nexport const REQUEST_LOGIN = 'REQUEST_LOGIN';\nexport const RECEIVE_LOGIN = 'RECEIVE_LOGIN';\nexport const SAVE_PROFILE = 'SAVE_PROFILE';\nexport const UPDATE_LOGIN_FIELD = 'UPDATE_LOGIN_FIELD';\n\n/**\n * invoked when a login is requested\n */\nfunction requestLogin() {\n  return {\n    type: REQUEST_LOGIN\n  };\n}\n\n/**\n * invoked when a login is received - success or error\n */\nexport function receiveLogin(response) {\n  return {\n    type: RECEIVE_LOGIN,\n    profile: response.data,\n    error: response.error\n  };\n}\n\n/**\n * initiates a login request\n */\nexport function initiateLogin(email, password) {\n  return dispatch => {\n    dispatch(requestLogin());\n\n    return UserService.login(email, password)\n      .then(profile => {\n        dispatch(receiveLogin({data: profile}));\n        dispatch(saveProfile(profile));\n        //dispatch(push('/dashboard'));\n      })\n      .catch(error => dispatch(receiveLogin({error: error})));\n  }\n}\n\n/**\n * logout user - delete profile, redirect to /\n */\nexport function logout() {\n  return dispatch => {\n    let logout_profile = {};\n\n    dispatch({type: LOGOUT});\n    dispatch(saveProfile(logout_profile));\n    // dispatch(push('/'));\n  };\n}\n\n/**\n * save profile to storage - could be expanded to be cross platform (react-native-storage)\n */\nexport function saveProfile(profile) {\n  return dispatch => {\n    storage.save({key: KEYS.USER_PROFILE, rawData: profile});\n    dispatch({type: SAVE_PROFILE});\n  }\n}\n\n/**\n * set the value for a login field (email, password, etc.)\n */\nexport function updateLoginField(key, value) {\n  return {\n    type: UPDATE_LOGIN_FIELD,\n    key: key,\n    value: value\n  };\n}\n\n/**\n * validates a user profile\n */\nexport function validateProfile() {\n  return (dispatch, getState) => {\n    return storage.load({key: KEYS.USER_PROFILE, autoSync: false})\n      .then(profile => {\n        if (profile && profile.status === 'authenticated') {\n          dispatch(receiveLogin({profile: profile}));\n          // dispatch(push(next_route));\n        }\n      })\n      .catch(error => {\n        // handle missing profile\n        dispatch(saveProfile({}));\n      });\n  }\n}\n"]}