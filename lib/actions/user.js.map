{"version":3,"sources":["../../src/actions/user.js"],"names":["receiveLogin","initiateLogin","logout","saveProfile","updateLoginField","validateProfile","UserService","LOGOUT","REQUEST_LOGIN","RECEIVE_LOGIN","SAVE_PROFILE","UPDATE_LOGIN_FIELD","requestLogin","type","response","profile","data","error","email","password","dispatch","login","then","catch","localStorage","key","value","dispatch_payload","getState"],"mappings":";;;;;;QAoBgBA,Y,GAAAA,Y;QAWAC,a,GAAAA,a;QAiBAC,M,GAAAA,M;QAWAC,W,GAAAA,W;QAUAC,gB,GAAAA,gB;QAeAC,e,GAAAA,e;;AApFhB;;IAAYC,W;;;;AAEL,IAAMC,0BAAS,QAAf;AACA,IAAMC,wCAAgB,eAAtB;AACA,IAAMC,wCAAgB,eAAtB;AACA,IAAMC,sCAAe,cAArB;AACA,IAAMC,kDAAqB,oBAA3B;;AAEP;;;AAGA,SAASC,YAAT,GAAwB;AACtB,SAAO;AACLC,UAAML;AADD,GAAP;AAGD;;AAED;;;AAGO,SAASR,YAAT,CAAsBc,QAAtB,EAAgC;AACrC,SAAO;AACLD,UAAMJ,aADD;AAELM,aAASD,SAASE,IAFb;AAGLC,WAAOH,SAASG;AAHX,GAAP;AAKD;;AAED;;;AAGO,SAAShB,aAAT,CAAuBiB,KAAvB,EAA8BC,QAA9B,EAAwC;AAC7C,SAAO,oBAAY;AACjBC,aAASR,cAAT;;AAEA,WAAON,YAAYe,KAAZ,CAAkBH,KAAlB,EAAyBC,QAAzB,EACJG,IADI,CACC,mBAAW;AACfF,eAASpB,aAAa,EAACgB,MAAMD,OAAP,EAAb,CAAT;AACAK,eAASjB,YAAYY,OAAZ,CAAT;AACA;AACD,KALI,EAMJQ,KANI,CAME;AAAA,aAASH,SAASpB,aAAa,EAACiB,OAAOA,KAAR,EAAb,CAAT,CAAT;AAAA,KANF,CAAP;AAOD,GAVD;AAWD;;AAED;;;AAGO,SAASf,MAAT,GAAkB;AACvB,SAAO,oBAAY;AACjB,WAAOsB,aAAa,cAAb,CAAP;AACA;AACAJ,aAAS,EAACP,MAAMN,MAAP,EAAT;AACD,GAJD;AAKD;;AAED;;;AAGO,SAASJ,WAAT,CAAqBY,OAArB,EAA8B;AACnC,SAAO,oBAAY;AACjB;AACAK,aAAS,EAACP,MAAMH,YAAP,EAAT;AACD,GAHD;AAID;;AAED;;;AAGO,SAASN,gBAAT,CAA0BqB,GAA1B,EAA+BC,KAA/B,EAAsC;AAC3C,SAAO,oBAAY;AACjB,QAAIC,mBAAmB;AACrBd,YAAMF,kBADe;AAErBc,WAAKA,GAFgB;AAGrBC,aAAOA;AAHc,KAAvB;;AAMAN,aAASO,gBAAT;AACD,GARD;AASD;;AAED;;;AAGO,SAAStB,eAAT,GAA2B;AAChC,SAAO,UAACe,QAAD,EAAWQ,QAAX,EAAwB;;AAE7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACD,GAZD;AAaD","file":"user.js","sourcesContent":["import * as UserService from '../services/user';\n\nexport const LOGOUT = 'LOGOUT';\nexport const REQUEST_LOGIN = 'REQUEST_LOGIN';\nexport const RECEIVE_LOGIN = 'RECEIVE_LOGIN';\nexport const SAVE_PROFILE = 'SAVE_PROFILE';\nexport const UPDATE_LOGIN_FIELD = 'UPDATE_LOGIN_FIELD';\n\n/**\n * invoked when a login is requested\n */\nfunction requestLogin() {\n  return {\n    type: REQUEST_LOGIN\n  };\n}\n\n/**\n * invoked when a login is received - success or error\n */\nexport function receiveLogin(response) {\n  return {\n    type: RECEIVE_LOGIN,\n    profile: response.data,\n    error: response.error\n  };\n}\n\n/**\n * initiates a login request\n */\nexport function initiateLogin(email, password) {\n  return dispatch => {\n    dispatch(requestLogin());\n\n    return UserService.login(email, password)\n      .then(profile => {\n        dispatch(receiveLogin({data: profile}));\n        dispatch(saveProfile(profile));\n        //dispatch(push('/dashboard'));\n      })\n      .catch(error => dispatch(receiveLogin({error: error})));\n  }\n}\n\n/**\n * logout user - delete profile, redirect to /\n */\nexport function logout() {\n  return dispatch => {\n    delete localStorage['USER_PROFILE'];\n    //dispatch(push('/'));\n    dispatch({type: LOGOUT});\n  }\n}\n\n/**\n * save profile to storage - could be expanded to be cross platform (react-native-storage)\n */\nexport function saveProfile(profile) {\n  return dispatch => {\n    //localStorage['USER_PROFILE'] = JSON.stringify(profile);\n    dispatch({type: SAVE_PROFILE});\n  }\n}\n\n/**\n * set the value for a login field (email, password, etc.)\n */\nexport function updateLoginField(key, value) {\n  return dispatch => {\n    let dispatch_payload = {\n      type: UPDATE_LOGIN_FIELD,\n      key: key,\n      value: value\n    };\n\n    dispatch(dispatch_payload);\n  }\n}\n\n/**\n * validates a user profile\n */\nexport function validateProfile() {\n  return (dispatch, getState) => {\n\n    // let user_profile = getState().user.profile || JSON.parse(localStorage['USER_PROFILE'] || '{}');\n\n    // if (user_profile && user_profile.status === 'authenticated') {\n    // get next routing state - default to /dashboard if next route is not available\n    // let routing_location = getState().routing.locationBeforeTransitions || {};\n    // let next_route = routing_location.state && routing_location.state.nextPathname || '/dashboard';\n\n    // dispatch(receiveLogin({data: user_profile}));\n    //dispatch(push(next_route));\n    // }\n  }\n}\n"]}