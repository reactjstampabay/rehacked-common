{"version":3,"sources":["../../src/initializers/storage.js"],"names":["binding_context","storage","size","defaultExpires","enableCache","sync"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;;;;;;kBASe,UAACA,eAAD,EAAqB;;AAElC,MAAIA,eAAJ,EAAqB;;AAEnBA,oBAAgBC,OAAhB,GAA0B,iCAAY;AACpC;AACAC,YAAM,IAF8B;;AAIpC;AACA;AACAC,sBAAgB,OAAO,IAAP,GAAc,EANM;;AAQpC;AACAC,mBAAa,IATuB;;AAWpC;AACA;AACA;AACAC,YAAM;AACJ;AADI;AAd8B,KAAZ,CAA1B;AAkBD;AACF,C","file":"storage.js","sourcesContent":["import Storage from 'react-native-storage';\n\n/**\n * initializes a storage system\n *\n *  react-native (AsyncStorage) and browser (localStorage)\n *\n *  expects the appropriate binding_context (window or global)\n *\n *  https://www.npmjs.com/package/react-native-storage\n */\nexport default (binding_context) => {\n\n  if (binding_context) {\n\n    binding_context.storage = new Storage({\n      // maximum capacity, default 1000\n      size: 1000,\n\n      // expire time, default 1 day(1000 * 3600 * 24 milliseconds).\n      // can be null, which means never expire.\n      defaultExpires: 1000 * 3600 * 24,\n\n      // cache data in the memory. default is true.\n      enableCache: true,\n\n      // if data was not found in storage or expired,\n      // the corresponding sync method will be invoked and return\n      // the latest data.\n      sync: {\n        // we'll talk about the details later.\n      }\n    });\n  }\n};\n"]}