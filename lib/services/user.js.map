{"version":3,"sources":["../../src/services/user.js"],"names":["login","email","password","Promise","resolve","reject","url","API_PATH","LOGIN","payload","options","method","body","JSON","stringify","fetch","then","checkStatus","response","json","responseJson","catch","error","status","text","parse","responseObj","Error","message"],"mappings":";;;;;QAIgBA,K,GAAAA,K;;AAJhB;;AACA;;AACA;;AAEO,SAASA,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgC;AACrC,SAAO,IAAIC,OAAJ,CACL,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACnB,QAAIC,MAAM,yBAAYC,QAAZ,GAAuB,gBAAKC,KAAtC;;AAEA,QAAIC,UAAU;AACZR,aAAOA,KADK;AAEZC,gBAAUA;AAFE,KAAd;;AAKA,QAAIQ,UAAU;AACZC,cAAQ,MADI;AAEZC,YAAMC,KAAKC,SAAL,CAAeL,OAAf;AAFM,KAAd;;AAKA,WAAOM,MAAMT,GAAN,EAAWI,OAAX,EACJM,IADI,CACC,oBAAY;AAChB,aAAOC,YAAYC,QAAZ,CAAP;AACD,KAHI,EAIJF,IAJI,CAIC,oBAAY;AAChB,aAAOE,SAASC,IAAT,EAAP;AACD,KANI,EAOJH,IAPI,CAOC,wBAAgB;AACpB,aAAOZ,QAAQgB,YAAR,CAAP;AACD,KATI,EAUJC,KAVI,CAUE,iBAAS;AACd,aAAOhB,OAAOiB,KAAP,CAAP;AACD,KAZI,CAAP;AAaD,GA3BI,CAAP;AA4BD;;AAED,SAASL,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,MAAIA,SAASK,MAAT,IAAmB,GAAnB,IAA0BL,SAASK,MAAT,GAAkB,GAAhD,EAAqD;AACnD,WAAOL,QAAP;AACD,GAFD,MAEO;AACL,WAAOA,SAASM,IAAT,GACJR,IADI,CACC,uBAAe;AACnB,UAAIE,WAAWL,KAAKY,KAAL,CAAWC,WAAX,CAAf;AACA,YAAM,IAAIC,KAAJ,CAAUT,SAASU,OAAnB,CAAN;AACD,KAJI,CAAP;AAKD;AACF","file":"user.js","sourcesContent":["import 'isomorphic-fetch';\nimport {ENVIRONMENT} from '../constants/environment';\nimport {USER} from '../constants/endpoints';\n\nexport function login(email, password) {\n  return new Promise(\n    (resolve, reject) => {\n      let url = ENVIRONMENT.API_PATH + USER.LOGIN;\n\n      let payload = {\n        email: email,\n        password: password\n      };\n\n      let options = {\n        method: 'POST',\n        body: JSON.stringify(payload)\n      };\n\n      return fetch(url, options)\n        .then(response => {\n          return checkStatus(response);\n        })\n        .then(response => {\n          return response.json();\n        })\n        .then(responseJson => {\n          return resolve(responseJson);\n        })\n        .catch(error => {\n          return reject(error);\n        });\n    });\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    return response.text()\n      .then(responseObj => {\n        let response = JSON.parse(responseObj);\n        throw new Error(response.message);\n      });\n  }\n}\n"]}