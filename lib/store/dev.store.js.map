{"version":3,"sources":["../../src/store/dev.store.js"],"names":["initialState","rootReducer","middlewares","push","enhancer","getDebugSessionKey","window","devToolsExtension","f","store","handleHotModule","matches","location","href","match","length","module","hot","accept","nextRootReducer","require","default","replaceReducer"],"mappings":";;;;;;AAGA;;AACA;;AACA;;;;;;oMALA;;;;;kBAOe,UAACA,YAAD,EAAeC,WAAf,EAA4BC,WAA5B,EAA4C;AACzD;;;AAGAA,cAAYC,IAAZ,CAAiB,4BAAjB;;AAEA;;;AAGA,MAAMC,WAAW,oBACf,2DAAmBF,WAAnB,EADe,EAGf,iCAAaG,oBAAb,CAHe;;AAKf;AACAC,SAAOC,iBAAP,GAA2BD,OAAOC,iBAAP,EAA3B,GAAwD;AAAA,WAAKC,CAAL;AAAA,GANzC,CAAjB;;AASA;;;AAGA,MAAMC,QAAQ,wBAAYR,WAAZ,EAAyBD,YAAzB,EAAuCI,QAAvC,CAAd;;AAEA;;;AAGAM,kBAAgBD,KAAhB;;AAEA,SAAOA,KAAP;AACD,C;;AAED;;;;;;AAIA,SAASJ,kBAAT,GAA8B;AAC5B,MAAMM,UAAUL,OAAOM,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,6BAA3B,CAAhB;AACA,SAAQH,WAAWA,QAAQI,MAAR,GAAiB,CAA7B,GAAkCJ,QAAQ,CAAR,CAAlC,GAA+C,IAAtD;AACD;;AAED;;;AAGA,SAASD,eAAT,CAAyBD,KAAzB,EAAgC;AAC9B,MAAIO,OAAOC,GAAX,EAAgB;AACdD,WAAOC,GAAP,CAAWC,MAAX,CAAkB,aAAlB,EAAiC,YAAM;AACrC,UAAMC,kBAAkBC,QAAQ,aAAR,EAAuBC,OAA/C;AACAZ,YAAMa,cAAN,CAAqBH,eAArB;AACD,KAHD;AAID;AACF","file":"dev.store.js","sourcesContent":["/**\n * create store for non-production environments\n */\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport {persistState} from 'redux-devtools';\nimport createLogger from 'redux-logger';\n\nexport default (initialState, rootReducer, middlewares) => {\n  /**\n   * apply any development specific middleware\n   */\n  middlewares.push(createLogger());\n\n  /**\n   * returns the final function obtained by composing the given functions from right to left\n   */\n  const enhancer = compose(\n    applyMiddleware(...middlewares),\n\n    persistState(getDebugSessionKey()),\n\n    // chrome redux dev tools extension\n    window.devToolsExtension ? window.devToolsExtension() : f => f\n  );\n\n  /**\n   * create development redux store\n   */\n  const store = createStore(rootReducer, initialState, enhancer);\n\n  /**\n   * allow hot swap of reducers\n   */\n  handleHotModule(store);\n\n  return store;\n}\n\n/**\n * You can write custom logic here!\n * By default we try to read the key from ?debug_session=<key> in the address bar\n */\nfunction getDebugSessionKey() {\n  const matches = window.location.href.match(/[?&]debug_session=([^&]+)\\b/);\n  return (matches && matches.length > 0) ? matches[1] : null;\n}\n\n/**\n * hot swap root reducer\n */\nfunction handleHotModule(store) {\n  if (module.hot) {\n    module.hot.accept('../reducers', () => {\n      const nextRootReducer = require('../reducers').default;\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n}\n"]}